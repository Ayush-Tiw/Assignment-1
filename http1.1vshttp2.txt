Question-1) Write a blog on difference between HTTP1.1 vs HTTP2 

Answer-
HTTP1.1-
1) It was develop in 1997.

2) It supports connection reuse i.e. for every TCP connection there could be multiple requests and responses, and pipelining where the client can request several resources from the server at once. However, pipelining was hard to implement due to issues such as head-of-line blocking and was not a feasible solution.

3) It Introduces a warning header field to carry additional information about the status of a message. Can define 24 status codes, error reporting is quicker and more efficient.

4) Iit uses digest authentication, NTLM authentication.

5) Expands on the caching support by using additional headers like cache-control, conditional headers like If-Match and by using entity tags.

6) HTTP1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it.

HTTP2-
1) It was develop in 2015.

2) Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at the same time. It is done using streams which can be prioritized, can have dependencies and individual flow control. It also provides a feature called server push that allows the server to send data that the client will need but has not yet requested

3) Underlying semantics of HTTP such as headers, status codes remains the same.

4) Security concerns from previous versions will continue to be seen in HTTP/2. However, it is better equipped to deal with them due to new TLS features like connection error of type Inadequate_Security.

5) HTTP2 does not change much in terms of caching. With the server push feature if the client finds the resources are already present in the cache, it can cancel the pushed stream.

6)  HTTP2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource. HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.
